{"ast":null,"code":"import _objectSpread from \"/home/wesaka/WebstormProjects/crwn-store/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { takeLatest, put, all, call } from 'redux-saga/effects';\nimport UserActionTypes from \"./user.types\";\nimport { signInSuccess, signInFailure, signOutFailure, signOutSuccess, signUpFailure, signUpSuccess, emailSignInStart } from \"./user.actions\";\nimport { googleProvider, auth, createUserProfileDocument, getCurrentUser } from \"../../firebase/firebase.utils\"; // SIGN IN\n\nexport function* getSnapshotFromUserAuth(userAuth) {\n  try {\n    // Now that we have the user, we have to retrieve the snapshot from firebase\n    const userRef = yield call(createUserProfileDocument, userAuth);\n    const userSnapshot = yield userRef.get(); // Put just puts things back on the regular redux flow\n\n    yield put(signInSuccess(_objectSpread({\n      id: userSnapshot.id\n    }, userSnapshot.data)));\n  } catch (e) {\n    yield put(signInFailure(e));\n  }\n} // We have to make a function that is going to actually sign in the user with google to be called later\n\nexport function* signInWithGoogle() {\n  // Let's wrap the API call with a try/catch condition\n  try {\n    const _ref = yield auth.signInWithPopup(googleProvider),\n          user = _ref.user;\n\n    yield getSnapshotFromUserAuth(user);\n  } catch (e) {\n    yield put(signInFailure(e));\n  }\n} // First we need to listen for google sign start than trigger the actual sign in from saga\n\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const _ref2 = yield auth.signInWithEmailAndPassword(email, password),\n          user = _ref2.user;\n\n    yield getSnapshotFromUserAuth(user);\n  } catch (e) {\n    put(signInFailure(e));\n  }\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n} // CHECK AUTHENTICATION\n\nexport function* isUserAuthenticated() {\n  try {\n    // The getCurrentUser is that Promise we declared on firebase.utils\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return;\n    yield getSnapshotFromUserAuth(userAuth);\n  } catch (e) {\n    yield put(signInFailure(e));\n  }\n}\nexport function* onCheckUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n} // SIGN OUT\n\nexport function* signOut() {\n  try {\n    yield auth.signOut();\n    yield put(signOutSuccess());\n  } catch (e) {\n    yield put(signOutFailure(e));\n  }\n}\nexport function* onSignOutStart() {\n  yield takeLatest(UserActionTypes.SIGN_OUT_START, signOut);\n} // SIGN UP\n\nexport function* signUp({\n  payload: {\n    displayName,\n    email,\n    password,\n    confirmPassword\n  }\n}) {\n  if (password !== confirmPassword) {\n    alert(\"Passwords don't match (REDUX)!\");\n    return;\n  }\n\n  try {\n    const _ref3 = yield auth.createUserWithEmailAndPassword(email, password),\n          user = _ref3.user;\n\n    yield createUserProfileDocument(user, displayName);\n    yield put(signUpSuccess());\n  } catch (e) {\n    yield put(signUpFailure(e));\n  } // After user signed up, sign them in\n  // No need for try and catch as it have its own\n\n\n  yield call(emailSignInStart, {\n    email,\n    password\n  });\n}\nexport function* onSignUp() {\n  yield takeLatest(UserActionTypes.SIGN_UP_START, signUp);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart), call(onCheckUserSession), call(onSignOutStart), call(onSignUp)]);\n}","map":{"version":3,"sources":["/home/wesaka/WebstormProjects/crwn-store/src/redux/user/user.sagas.js"],"names":["takeLatest","put","all","call","UserActionTypes","signInSuccess","signInFailure","signOutFailure","signOutSuccess","signUpFailure","signUpSuccess","emailSignInStart","googleProvider","auth","createUserProfileDocument","getCurrentUser","getSnapshotFromUserAuth","userAuth","userRef","userSnapshot","get","id","data","e","signInWithGoogle","signInWithPopup","user","onGoogleSignInStart","GOOGLE_SIGN_IN_START","signInWithEmail","payload","email","password","signInWithEmailAndPassword","onEmailSignInStart","EMAIL_SIGN_IN_START","isUserAuthenticated","onCheckUserSession","CHECK_USER_SESSION","signOut","onSignOutStart","SIGN_OUT_START","signUp","displayName","confirmPassword","alert","createUserWithEmailAndPassword","onSignUp","SIGN_UP_START","userSagas"],"mappings":"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","sourcesContent":["import { takeLatest, put, all, call } from 'redux-saga/effects';\n\nimport UserActionTypes from \"./user.types\";\n\nimport {\n    signInSuccess,\n    signInFailure,\n    signOutFailure,\n    signOutSuccess,\n    signUpFailure,\n    signUpSuccess,\n    emailSignInStart\n} from \"./user.actions\";\n\nimport {\n    googleProvider,\n    auth,\n    createUserProfileDocument,\n    getCurrentUser\n} from \"../../firebase/firebase.utils\";\n\n\n// SIGN IN\n\nexport function* getSnapshotFromUserAuth(userAuth) {\n    try {\n        // Now that we have the user, we have to retrieve the snapshot from firebase\n        const userRef = yield call(createUserProfileDocument, userAuth);\n        const userSnapshot = yield userRef.get();\n\n        // Put just puts things back on the regular redux flow\n        yield put(signInSuccess({ id: userSnapshot.id, ...userSnapshot.data }));\n    } catch (e) {\n        yield put(signInFailure(e));\n    }\n}\n\n// We have to make a function that is going to actually sign in the user with google to be called later\nexport function* signInWithGoogle() {\n    // Let's wrap the API call with a try/catch condition\n    try {\n        const { user } = yield auth.signInWithPopup(googleProvider);\n        yield getSnapshotFromUserAuth(user);\n    } catch (e) {\n        yield put(signInFailure(e));\n    }\n}\n\n// First we need to listen for google sign start than trigger the actual sign in from saga\nexport function* onGoogleSignInStart() {\n    yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle)\n}\n\nexport function* signInWithEmail({payload: { email, password }}) {\n    try {\n        const { user } = yield auth.signInWithEmailAndPassword(email, password);\n        yield getSnapshotFromUserAuth(user);\n    } catch (e) {\n        put(signInFailure(e));\n    }\n}\n\nexport function* onEmailSignInStart() {\n    yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail)\n}\n\n\n// CHECK AUTHENTICATION\n\nexport function* isUserAuthenticated() {\n    try {\n        // The getCurrentUser is that Promise we declared on firebase.utils\n        const userAuth = yield getCurrentUser();\n\n        if (!userAuth) return;\n\n        yield getSnapshotFromUserAuth(userAuth);\n    } catch (e) {\n        yield put(signInFailure(e));\n    }\n}\n\nexport function* onCheckUserSession() {\n    yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated)\n}\n\n\n// SIGN OUT\n\nexport function* signOut() {\n    try {\n        yield auth.signOut();\n        yield put(signOutSuccess());\n\n    } catch (e) {\n        yield put(signOutFailure(e));\n    }\n}\n\nexport function* onSignOutStart() {\n    yield takeLatest(UserActionTypes.SIGN_OUT_START, signOut);\n}\n\n\n// SIGN UP\n\nexport function* signUp({payload: {displayName, email, password, confirmPassword}}) {\n    if (password !== confirmPassword) {\n        alert(\"Passwords don't match (REDUX)!\");\n        return;\n    }\n\n    try {\n        const { user } = yield auth.createUserWithEmailAndPassword(email, password);\n        yield createUserProfileDocument(user, displayName);\n        yield put(signUpSuccess());\n    } catch (e) {\n        yield put(signUpFailure(e));\n    }\n\n    // After user signed up, sign them in\n    // No need for try and catch as it have its own\n    yield call(emailSignInStart, {email, password});\n}\n\nexport function* onSignUp() {\n    yield takeLatest(UserActionTypes.SIGN_UP_START, signUp)\n}\n\nexport function* userSagas() {\n    yield all([\n        call(onGoogleSignInStart),\n        call(onEmailSignInStart),\n        call(onCheckUserSession),\n        call(onSignOutStart),\n        call(onSignUp)\n    ]);\n}"]},"metadata":{},"sourceType":"module"}