{"ast":null,"code":"import _objectSpread from \"/home/wesaka/WebstormProjects/crwn-store/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport CartActionTypes from \"./cart.types\";\nimport { addItemToCart } from \"./cart.utils\";\nimport { removeItemFromCart } from \"./cart.utils\";\nconst INITIAL_STATE = {\n  hidden: true,\n  cartItems: []\n};\n\nconst cartReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case CartActionTypes.TOGGLE_CART_HIDDEN:\n      return _objectSpread({}, state, {\n        hidden: !state.hidden\n      });\n\n    case CartActionTypes.ADD_ITEM:\n      return _objectSpread({}, state, {\n        cartItems: addItemToCart(state.cartItems, action.payload)\n      });\n\n    case CartActionTypes.REMOVE_ITEM:\n      return _objectSpread({}, state, {\n        cartItems: removeItemFromCart(state.cartItems, action.payload)\n      });\n\n    case CartActionTypes.CLEAR_ALL_ITEMS:\n      return _objectSpread({}, state, {\n        cartItems: state.cartItems.filter(cartItem => cartItem.id !== action.payload.id) // Filter returns anything that evaluates to true\n        // In our case, we will compare every item in the array for the inequality and return all the items\n        // that have a different id in a completely new array of cartItems\n\n      });\n\n    case CartActionTypes.CLEAR_CART:\n      return _objectSpread({}, state, {\n        cartItems: []\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default cartReducer;","map":{"version":3,"sources":["/home/wesaka/WebstormProjects/crwn-store/client/src/redux/cart/cart.reducer.js"],"names":["CartActionTypes","addItemToCart","removeItemFromCart","INITIAL_STATE","hidden","cartItems","cartReducer","state","action","type","TOGGLE_CART_HIDDEN","ADD_ITEM","payload","REMOVE_ITEM","CLEAR_ALL_ITEMS","filter","cartItem","id","CLEAR_CART"],"mappings":";AAAA,OAAOA,eAAP,MAA4B,cAA5B;AACA,SAAQC,aAAR,QAA4B,cAA5B;AACA,SAAQC,kBAAR,QAAiC,cAAjC;AAEA,MAAMC,aAAa,GAAG;AAClBC,EAAAA,MAAM,EAAE,IADU;AAElBC,EAAAA,SAAS,EAAE;AAFO,CAAtB;;AAKA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAGJ,aAAT,EAAwBK,MAAxB,KAAmC;AACnD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKT,eAAe,CAACU,kBAArB;AACI,+BACOH,KADP;AAEIH,QAAAA,MAAM,EAAE,CAACG,KAAK,CAACH;AAFnB;;AAKJ,SAAKJ,eAAe,CAACW,QAArB;AACI,+BACOJ,KADP;AAEIF,QAAAA,SAAS,EAAEJ,aAAa,CAACM,KAAK,CAACF,SAAP,EAAkBG,MAAM,CAACI,OAAzB;AAF5B;;AAKJ,SAAKZ,eAAe,CAACa,WAArB;AACI,+BACON,KADP;AAEIF,QAAAA,SAAS,EAAEH,kBAAkB,CAACK,KAAK,CAACF,SAAP,EAAkBG,MAAM,CAACI,OAAzB;AAFjC;;AAKJ,SAAKZ,eAAe,CAACc,eAArB;AACI,+BACOP,KADP;AAEIF,QAAAA,SAAS,EAAEE,KAAK,CAACF,SAAN,CAAgBU,MAAhB,CACPC,QAAQ,IAAIA,QAAQ,CAACC,EAAT,KAAgBT,MAAM,CAACI,OAAP,CAAeK,EADpC,CAFf,CAKI;AACA;AACA;;AAPJ;;AAUJ,SAAKjB,eAAe,CAACkB,UAArB;AACI,+BACOX,KADP;AAEIF,QAAAA,SAAS,EAAE;AAFf;;AAKJ;AACI,aAAOE,KAAP;AArCR;AAuCH,CAxCD;;AA0CA,eAAeD,WAAf","sourcesContent":["import CartActionTypes from \"./cart.types\";\nimport {addItemToCart} from \"./cart.utils\";\nimport {removeItemFromCart} from \"./cart.utils\";\n\nconst INITIAL_STATE = {\n    hidden: true,\n    cartItems: []\n};\n\nconst cartReducer = (state = INITIAL_STATE, action) => {\n    switch (action.type) {\n        case CartActionTypes.TOGGLE_CART_HIDDEN:\n            return {\n                ...state,\n                hidden: !state.hidden\n            };\n\n        case CartActionTypes.ADD_ITEM:\n            return {\n                ...state,\n                cartItems: addItemToCart(state.cartItems, action.payload)\n            };\n\n        case CartActionTypes.REMOVE_ITEM:\n            return {\n                ...state,\n                cartItems: removeItemFromCart(state.cartItems, action.payload)\n            };\n\n        case CartActionTypes.CLEAR_ALL_ITEMS:\n            return {\n                ...state,\n                cartItems: state.cartItems.filter(\n                    cartItem => cartItem.id !== action.payload.id\n                )\n                // Filter returns anything that evaluates to true\n                // In our case, we will compare every item in the array for the inequality and return all the items\n                // that have a different id in a completely new array of cartItems\n            };\n\n        case CartActionTypes.CLEAR_CART:\n            return {\n                ...state,\n                cartItems: []\n            };\n\n        default:\n            return state;\n    }\n};\n\nexport default cartReducer;"]},"metadata":{},"sourceType":"module"}