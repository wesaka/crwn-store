{"ast":null,"code":"var _jsxFileName = \"/home/wesaka/WebstormProjects/crwn-store/src/pages/shop/shop.component.jsx\";\nimport React, { Component } from \"react\";\nimport { Route } from 'react-router-dom';\nimport { createStructuredSelector } from \"reselect\";\nimport { connect } from 'react-redux';\nimport { fetchCollectionsStartAsync } from \"../../redux/shop/shop.actions\";\nimport { selectIsCollectionFetching, selectIsCollectionsLoaded } from \"../../redux/shop/shop.selectors\";\nimport CollectionsOverview from \"../../components/collections-overview/collections-overview.component\";\nimport CollectionPage from \"../collection/collection.component.jsx\";\nimport WithSpinner from \"../../components/with-spinner/with-spinner.component\";\nconst CollectionsOverviewWithSpinner = WithSpinner(CollectionsOverview);\nconst CollectionPageWithSpinner = WithSpinner(CollectionPage); // We have access to the match object here because we are using a route component in App.js to arrive here\n// Match.path allows us to route to a new page without having to worry about the url so far\n\nclass ShopPage extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      loading: true\n    };\n    this.unsubscribeFromSnapshot = null;\n  }\n\n  // Remember to access the redux function that is being passed on mapDispatchToProps\n  componentDidMount() {\n    const fetchCollectionsStartAsync = this.props.fetchCollectionsStartAsync;\n    fetchCollectionsStartAsync();\n  } // And here to access the isCollectionFetching prop being passed on mapStateToProps\n\n\n  render() {\n    const _this$props = this.props,\n          match = _this$props.match,\n          isCollectionFetching = _this$props.isCollectionFetching,\n          isCollectionLoaded = _this$props.isCollectionLoaded;\n    return React.createElement(\"div\", {\n      className: \"shop-page\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }, React.createElement(Route, {\n      exact: true,\n      path: `${match.path}`,\n      render: props => React.createElement(CollectionsOverviewWithSpinner, Object.assign({\n        isLoading: isCollectionFetching\n      }, props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }), \"// We need to pass isCollectionLoaded here because if we refresh the page on the collection // The app has no reference of the isCollectionFetching, because the collection has been already // Loaded and a new render has been called, resetting the value for the spinner to be shown\", React.createElement(Route, {\n      path: `${match.path}/:collectionId`,\n      render: props => React.createElement(CollectionPageWithSpinner, Object.assign({\n        isLoading: !isCollectionLoaded\n      }, props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }));\n  }\n\n} // Here we use a selector to get that single state from redux-thunk\n\n\nconst mapStateToProps = createStructuredSelector({\n  isCollectionFetching: selectIsCollectionFetching,\n  isCollectionLoaded: selectIsCollectionsLoaded\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchCollectionsStartAsync: () => dispatch(fetchCollectionsStartAsync())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ShopPage);","map":{"version":3,"sources":["/home/wesaka/WebstormProjects/crwn-store/src/pages/shop/shop.component.jsx"],"names":["React","Component","Route","createStructuredSelector","connect","fetchCollectionsStartAsync","selectIsCollectionFetching","selectIsCollectionsLoaded","CollectionsOverview","CollectionPage","WithSpinner","CollectionsOverviewWithSpinner","CollectionPageWithSpinner","ShopPage","state","loading","unsubscribeFromSnapshot","componentDidMount","props","render","match","isCollectionFetching","isCollectionLoaded","path","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAASC,KAAT,QAAsB,kBAAtB;AACA,SAASC,wBAAT,QAAyC,UAAzC;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,SAASC,0BAAT,QAA2C,+BAA3C;AACA,SAASC,0BAAT,EAAqCC,yBAArC,QAAsE,iCAAtE;AAEA,OAAOC,mBAAP,MAAgC,sEAAhC;AACA,OAAOC,cAAP,MAA2B,wCAA3B;AACA,OAAOC,WAAP,MAAwB,sDAAxB;AAEA,MAAMC,8BAA8B,GAAGD,WAAW,CAACF,mBAAD,CAAlD;AACA,MAAMI,yBAAyB,GAAGF,WAAW,CAACD,cAAD,CAA7C,C,CAEA;AACA;;AACA,MAAMI,QAAN,SAAuBZ,SAAvB,CAAiC;AAAA;AAAA;AAAA,SAC7Ba,KAD6B,GACrB;AACJC,MAAAA,OAAO,EAAE;AADL,KADqB;AAAA,SAK7BC,uBAL6B,GAKH,IALG;AAAA;;AAO7B;AACAC,EAAAA,iBAAiB,GAAG;AAAA,UACRZ,0BADQ,GACuB,KAAKa,KAD5B,CACRb,0BADQ;AAEhBA,IAAAA,0BAA0B;AAC7B,GAX4B,CAa7B;;;AACAc,EAAAA,MAAM,GAAG;AAAA,wBACuD,KAAKD,KAD5D;AAAA,UACGE,KADH,eACGA,KADH;AAAA,UACUC,oBADV,eACUA,oBADV;AAAA,UACgCC,kBADhC,eACgCA,kBADhC;AAGL,WACI;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,KAAD;AAAO,MAAA,KAAK,MAAZ;AAAa,MAAA,IAAI,EAAG,GAAEF,KAAK,CAACG,IAAK,EAAjC;AACO,MAAA,MAAM,EAAGL,KAAD,IAAW,oBAAC,8BAAD;AAAgC,QAAA,SAAS,EAAEG;AAA3C,SAAqEH,KAArE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAD1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,8RAOI,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAG,GAAEE,KAAK,CAACG,IAAK,gBAA3B;AACO,MAAA,MAAM,EAAGL,KAAD,IAAW,oBAAC,yBAAD;AAA2B,QAAA,SAAS,EAAE,CAACI;AAAvC,SAA+DJ,KAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAD1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPJ,CADJ;AAYH;;AA7B4B,C,CAgCjC;;;AACA,MAAMM,eAAe,GAAGrB,wBAAwB,CAAC;AAC7CkB,EAAAA,oBAAoB,EAAEf,0BADuB;AAE7CgB,EAAAA,kBAAkB,EAAEf;AAFyB,CAAD,CAAhD;;AAKA,MAAMkB,kBAAkB,GAAGC,QAAQ,KAAK;AACpCrB,EAAAA,0BAA0B,EAAE,MAAMqB,QAAQ,CAACrB,0BAA0B,EAA3B;AADN,CAAL,CAAnC;;AAIA,eAAeD,OAAO,CAACoB,eAAD,EAAkBC,kBAAlB,CAAP,CAA6CZ,QAA7C,CAAf","sourcesContent":["import React, {Component} from \"react\";\nimport { Route } from 'react-router-dom';\nimport { createStructuredSelector } from \"reselect\";\nimport { connect } from 'react-redux';\n\nimport { fetchCollectionsStartAsync } from \"../../redux/shop/shop.actions\";\nimport { selectIsCollectionFetching, selectIsCollectionsLoaded } from \"../../redux/shop/shop.selectors\";\n\nimport CollectionsOverview from \"../../components/collections-overview/collections-overview.component\";\nimport CollectionPage from \"../collection/collection.component.jsx\";\nimport WithSpinner from \"../../components/with-spinner/with-spinner.component\";\n\nconst CollectionsOverviewWithSpinner = WithSpinner(CollectionsOverview);\nconst CollectionPageWithSpinner = WithSpinner(CollectionPage);\n\n// We have access to the match object here because we are using a route component in App.js to arrive here\n// Match.path allows us to route to a new page without having to worry about the url so far\nclass ShopPage extends Component {\n    state = {\n        loading: true\n    };\n\n    unsubscribeFromSnapshot = null;\n\n    // Remember to access the redux function that is being passed on mapDispatchToProps\n    componentDidMount() {\n        const { fetchCollectionsStartAsync } = this.props;\n        fetchCollectionsStartAsync();\n    }\n\n    // And here to access the isCollectionFetching prop being passed on mapStateToProps\n    render() {\n        const { match, isCollectionFetching, isCollectionLoaded } = this.props;\n\n        return (\n            <div className='shop-page'>\n                <Route exact path={`${match.path}`}\n                       render={(props) => <CollectionsOverviewWithSpinner isLoading={isCollectionFetching} {...props}/>}/>\n\n                // We need to pass isCollectionLoaded here because if we refresh the page on the collection\n                // The app has no reference of the isCollectionFetching, because the collection has been already\n                // Loaded and a new render has been called, resetting the value for the spinner to be shown\n                <Route path={`${match.path}/:collectionId`}\n                       render={(props) => <CollectionPageWithSpinner isLoading={!isCollectionLoaded} {...props}/>}/>\n            </div>\n        );\n    }\n}\n\n// Here we use a selector to get that single state from redux-thunk\nconst mapStateToProps = createStructuredSelector({\n    isCollectionFetching: selectIsCollectionFetching,\n    isCollectionLoaded: selectIsCollectionsLoaded\n});\n\nconst mapDispatchToProps = dispatch => ({\n    fetchCollectionsStartAsync: () => dispatch(fetchCollectionsStartAsync())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ShopPage);"]},"metadata":{},"sourceType":"module"}