{"ast":null,"code":"import { takeEvery, call } from 'redux-saga/effects';\nimport ShopActionTypes from \"./shop.types\";\nimport { convertCollectionsSnapshotToMap, firestore } from \"../../firebase/firebase.utils\";\nimport { fetchCollectionsFailure, fetchCollectionsSuccess } from \"./shop.actions\"; // This generator function here is what is going to manage the chain of actions of fetching collections\n// This used to be managed and called by redux thunk, but now we're using sagas to do it\n\nexport function* fetchCollectionAsync() {\n  const collectionRef = firestore.collection('collections');\n  const snapshot = yield collectionRef.get(); // This is very similar to async await\n\n  const collectionsMap = yield call(convertCollectionsSnapshotToMap); // We want to yield if the call takes longer than expected\n  // const collectionRef = firestore.collection('collections');\n  // dispatch(fetchCollectionsStart());\n  //\n  // collectionRef.get().then(snapshot => {\n  //     const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n  //     dispatch(fetchCollectionsSuccess(collectionsMap));\n  // }).catch(error => dispatch(fetchCollectionsFailure(error.message)));\n}\nexport function* fetchCollectionsStart() {\n  // Basically, this thing here listens to the specific redux actions and fires new functions accordingly\n  yield takeEvery(ShopActionTypes.FETCH_COLLECTION_START, fetchCollectionAsync);\n}","map":{"version":3,"sources":["/home/wesaka/WebstormProjects/crwn-store/src/redux/shop/shop.sagas.js"],"names":["takeEvery","call","ShopActionTypes","convertCollectionsSnapshotToMap","firestore","fetchCollectionsFailure","fetchCollectionsSuccess","fetchCollectionAsync","collectionRef","collection","snapshot","get","collectionsMap","fetchCollectionsStart","FETCH_COLLECTION_START"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,IAApB,QAAgC,oBAAhC;AAEA,OAAOC,eAAP,MAA4B,cAA5B;AACA,SAAQC,+BAAR,EAAyCC,SAAzC,QAAyD,+BAAzD;AACA,SAAQC,uBAAR,EAAiCC,uBAAjC,QAA+D,gBAA/D,C,CAEA;AACA;;AACA,OAAO,UAAUC,oBAAV,GAAiC;AACpC,QAAMC,aAAa,GAAGJ,SAAS,CAACK,UAAV,CAAqB,aAArB,CAAtB;AACA,QAAMC,QAAQ,GAAG,MAAMF,aAAa,CAACG,GAAd,EAAvB,CAFoC,CAEQ;;AAC5C,QAAMC,cAAc,GAAG,MAAMX,IAAI,CAACE,+BAAD,CAAjC,CAHoC,CAG+B;AAEnE;AACA;AACA;AACA;AACA;AACA;AACA;AACH;AAED,OAAO,UAAUU,qBAAV,GAAkC;AACrC;AACA,QAAMb,SAAS,CAACE,eAAe,CAACY,sBAAjB,EAAyCP,oBAAzC,CAAf;AACH","sourcesContent":["import { takeEvery, call } from 'redux-saga/effects';\n\nimport ShopActionTypes from \"./shop.types\";\nimport {convertCollectionsSnapshotToMap, firestore} from \"../../firebase/firebase.utils\";\nimport {fetchCollectionsFailure, fetchCollectionsSuccess} from \"./shop.actions\";\n\n// This generator function here is what is going to manage the chain of actions of fetching collections\n// This used to be managed and called by redux thunk, but now we're using sagas to do it\nexport function* fetchCollectionAsync() {\n    const collectionRef = firestore.collection('collections');\n    const snapshot = yield collectionRef.get(); // This is very similar to async await\n    const collectionsMap = yield call(convertCollectionsSnapshotToMap) // We want to yield if the call takes longer than expected\n\n    // const collectionRef = firestore.collection('collections');\n    // dispatch(fetchCollectionsStart());\n    //\n    // collectionRef.get().then(snapshot => {\n    //     const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n    //     dispatch(fetchCollectionsSuccess(collectionsMap));\n    // }).catch(error => dispatch(fetchCollectionsFailure(error.message)));\n}\n\nexport function* fetchCollectionsStart() {\n    // Basically, this thing here listens to the specific redux actions and fires new functions accordingly\n    yield takeEvery(ShopActionTypes.FETCH_COLLECTION_START, fetchCollectionAsync);\n}"]},"metadata":{},"sourceType":"module"}