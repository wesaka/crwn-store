{"ast":null,"code":"import _objectSpread from \"/home/wesaka/WebstormProjects/crwn-store/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { takeLatest, put, all, call } from 'redux-saga/effects';\nimport UserActionTypes from \"./user.types\";\nimport { googleSignInSuccess, googleSignInFailure, emailSignInFailure } from \"./user.actions\";\nimport { googleProvider, auth, createUserProfileDocument } from \"../../firebase/firebase.utils\"; // We have to make a function that is going to actually sign in the user with google to be called later\n\nexport function* signInWithGoogle() {\n  // Let's wrap the API call with a try/catch condition\n  try {\n    const _ref = yield auth.signInWithPopup(googleProvider),\n          user = _ref.user; // Now that we have the user, we have to retrieve the snapshot from firebase\n\n\n    const userRef = yield call(createUserProfileDocument, user);\n    const userSnapshot = yield userRef.get(); // Put just puts things back on the regular redux flow\n\n    yield put(googleSignInSuccess(_objectSpread({\n      id: userSnapshot.id\n    }, userSnapshot.data)));\n  } catch (e) {\n    yield put(googleSignInFailure(e));\n  }\n} // First we need to listen for google sign start than trigger the actual sign in from saga\n\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const _ref2 = yield auth.signInWithEmailAndPassword(email, password),\n          user = _ref2.user;\n\n    const userRef = yield call(createUserProfileDocument, user);\n    const userSnapshot = yield userRef.get();\n  } catch (e) {\n    put(emailSignInFailure(e));\n  }\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart)]);\n}","map":{"version":3,"sources":["/home/wesaka/WebstormProjects/crwn-store/src/redux/user/user.sagas.js"],"names":["takeLatest","put","all","call","UserActionTypes","googleSignInSuccess","googleSignInFailure","emailSignInFailure","googleProvider","auth","createUserProfileDocument","signInWithGoogle","signInWithPopup","user","userRef","userSnapshot","get","id","data","e","onGoogleSignInStart","GOOGLE_SIGN_IN_START","signInWithEmail","payload","email","password","signInWithEmailAndPassword","onEmailSignInStart","EMAIL_SIGN_IN_START","userSagas"],"mappings":";AAAA,SAASA,UAAT,EAAqBC,GAArB,EAA0BC,GAA1B,EAA+BC,IAA/B,QAA2C,oBAA3C;AAEA,OAAOC,eAAP,MAA4B,cAA5B;AAEA,SAAQC,mBAAR,EAA6BC,mBAA7B,EAAkDC,kBAAlD,QAA2E,gBAA3E;AAEA,SAASC,cAAT,EAAyBC,IAAzB,EAA+BC,yBAA/B,QAAgE,+BAAhE,C,CAEA;;AACA,OAAO,UAAUC,gBAAV,GAA6B;AAChC;AACA,MAAI;AAAA,iBACiB,MAAMF,IAAI,CAACG,eAAL,CAAqBJ,cAArB,CADvB;AAAA,UACQK,IADR,QACQA,IADR,EAGA;;;AACA,UAAMC,OAAO,GAAG,MAAMX,IAAI,CAACO,yBAAD,EAA4BG,IAA5B,CAA1B;AACA,UAAME,YAAY,GAAG,MAAMD,OAAO,CAACE,GAAR,EAA3B,CALA,CAOA;;AACA,UAAMf,GAAG,CAACI,mBAAmB;AAAGY,MAAAA,EAAE,EAAEF,YAAY,CAACE;AAApB,OAA2BF,YAAY,CAACG,IAAxC,EAApB,CAAT;AACH,GATD,CASE,OAAOC,CAAP,EAAU;AACR,UAAMlB,GAAG,CAACK,mBAAmB,CAACa,CAAD,CAApB,CAAT;AAEH;AACJ,C,CAED;;AACA,OAAO,UAAUC,mBAAV,GAAgC;AACnC,QAAMpB,UAAU,CAACI,eAAe,CAACiB,oBAAjB,EAAuCV,gBAAvC,CAAhB;AACH;AAED,OAAO,UAAUW,eAAV,CAA0B;AAACC,EAAAA,OAAO,EAAE;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT;AAAV,CAA1B,EAA0D;AAC7D,MAAI;AAAA,kBACiB,MAAMhB,IAAI,CAACiB,0BAAL,CAAgCF,KAAhC,EAAuCC,QAAvC,CADvB;AAAA,UACQZ,IADR,SACQA,IADR;;AAEA,UAAMC,OAAO,GAAG,MAAMX,IAAI,CAACO,yBAAD,EAA4BG,IAA5B,CAA1B;AACA,UAAME,YAAY,GAAG,MAAMD,OAAO,CAACE,GAAR,EAA3B;AACH,GAJD,CAIE,OAAOG,CAAP,EAAU;AACRlB,IAAAA,GAAG,CAACM,kBAAkB,CAACY,CAAD,CAAnB,CAAH;AACH;AACJ;AAED,OAAO,UAAUQ,kBAAV,GAA+B;AAClC,QAAM3B,UAAU,CAACI,eAAe,CAACwB,mBAAjB,EAAsCN,eAAtC,CAAhB;AACH;AAED,OAAO,UAAUO,SAAV,GAAsB;AACzB,QAAM3B,GAAG,CAAC,CACNC,IAAI,CAACiB,mBAAD,CADE,CAAD,CAAT;AAGH","sourcesContent":["import { takeLatest, put, all, call } from 'redux-saga/effects';\n\nimport UserActionTypes from \"./user.types\";\n\nimport {googleSignInSuccess, googleSignInFailure, emailSignInFailure} from \"./user.actions\";\n\nimport { googleProvider, auth, createUserProfileDocument } from \"../../firebase/firebase.utils\";\n\n// We have to make a function that is going to actually sign in the user with google to be called later\nexport function* signInWithGoogle() {\n    // Let's wrap the API call with a try/catch condition\n    try {\n        const { user } = yield auth.signInWithPopup(googleProvider);\n\n        // Now that we have the user, we have to retrieve the snapshot from firebase\n        const userRef = yield call(createUserProfileDocument, user);\n        const userSnapshot = yield userRef.get();\n\n        // Put just puts things back on the regular redux flow\n        yield put(googleSignInSuccess({ id: userSnapshot.id, ...userSnapshot.data }));\n    } catch (e) {\n        yield put(googleSignInFailure(e));\n\n    }\n}\n\n// First we need to listen for google sign start than trigger the actual sign in from saga\nexport function* onGoogleSignInStart() {\n    yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle)\n}\n\nexport function* signInWithEmail({payload: { email, password }}) {\n    try {\n        const { user } = yield auth.signInWithEmailAndPassword(email, password);\n        const userRef = yield call(createUserProfileDocument, user);\n        const userSnapshot = yield userRef.get();\n    } catch (e) {\n        put(emailSignInFailure(e));\n    }\n}\n\nexport function* onEmailSignInStart() {\n    yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail)\n}\n\nexport function* userSagas() {\n    yield all([\n        call(onGoogleSignInStart)\n    ]);\n}"]},"metadata":{},"sourceType":"module"}