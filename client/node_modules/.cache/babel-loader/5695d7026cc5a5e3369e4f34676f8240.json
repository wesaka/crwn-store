{"ast":null,"code":"var _jsxFileName = \"/home/wesaka/WebstormProjects/crwn-store/src/pages/shop/shop.component.jsx\";\nimport React, { Component } from \"react\";\nimport { Route } from 'react-router-dom';\nimport { createStructuredSelector } from \"reselect\";\nimport { connect } from 'react-redux';\nimport { fetchCollectionsStartAsync } from \"../../redux/shop/shop.actions\";\nimport { selectIsCollectionFetching, selectIsCollectionsLoaded } from \"../../redux/shop/shop.selectors\";\nimport CollectionsOverviewContainer from \"../../components/collections-overview/collections-overview.container\";\nimport CollectionPageContainer from \"../collection/collection.container\";\nimport WithSpinner from \"../../components/with-spinner/with-spinner.component\";\nconst CollectionPageWithSpinner = WithSpinner(CollectionPage); // We have access to the match object here because we are using a route component in App.js to arrive here\n// Match.path allows us to route to a new page without having to worry about the url so far\n\nclass ShopPage extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      loading: true\n    };\n    this.unsubscribeFromSnapshot = null;\n  }\n\n  // Remember to access the redux function that is being passed on mapDispatchToProps\n  componentDidMount() {\n    const fetchCollectionsStartAsync = this.props.fetchCollectionsStartAsync;\n    fetchCollectionsStartAsync();\n  } // And here to access the isCollectionFetching prop being passed on mapStateToProps\n\n\n  render() {\n    const _this$props = this.props,\n          match = _this$props.match,\n          isCollectionLoaded = _this$props.isCollectionLoaded;\n    return (// Here we swapped the WithSpinner component for the container, as all variables are handled there\n      React.createElement(\"div\", {\n        className: \"shop-page\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }, React.createElement(Route, {\n        exact: true,\n        path: `${match.path}`,\n        component: CollectionsOverviewContainer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }), \"}/>\", React.createElement(Route, {\n        path: `${match.path}/:collectionId`,\n        component: CollectionPageContainer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }))\n    );\n  }\n\n} // Here we use a selector to get that single state from redux-thunk\n\n\nconst mapStateToProps = createStructuredSelector({\n  isCollectionLoaded: selectIsCollectionsLoaded\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchCollectionsStartAsync: () => dispatch(fetchCollectionsStartAsync())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ShopPage);","map":{"version":3,"sources":["/home/wesaka/WebstormProjects/crwn-store/src/pages/shop/shop.component.jsx"],"names":["React","Component","Route","createStructuredSelector","connect","fetchCollectionsStartAsync","selectIsCollectionFetching","selectIsCollectionsLoaded","CollectionsOverviewContainer","CollectionPageContainer","WithSpinner","CollectionPageWithSpinner","CollectionPage","ShopPage","state","loading","unsubscribeFromSnapshot","componentDidMount","props","render","match","isCollectionLoaded","path","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAASC,KAAT,QAAsB,kBAAtB;AACA,SAASC,wBAAT,QAAyC,UAAzC;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,SAASC,0BAAT,QAA2C,+BAA3C;AACA,SAASC,0BAAT,EAAqCC,yBAArC,QAAsE,iCAAtE;AAEA,OAAOC,4BAAP,MAAyC,sEAAzC;AACA,OAAOC,uBAAP,MAAoC,oCAApC;AACA,OAAOC,WAAP,MAAwB,sDAAxB;AAEA,MAAMC,yBAAyB,GAAGD,WAAW,CAACE,cAAD,CAA7C,C,CAEA;AACA;;AACA,MAAMC,QAAN,SAAuBZ,SAAvB,CAAiC;AAAA;AAAA;AAAA,SAC7Ba,KAD6B,GACrB;AACJC,MAAAA,OAAO,EAAE;AADL,KADqB;AAAA,SAK7BC,uBAL6B,GAKH,IALG;AAAA;;AAO7B;AACAC,EAAAA,iBAAiB,GAAG;AAAA,UACRZ,0BADQ,GACuB,KAAKa,KAD5B,CACRb,0BADQ;AAEhBA,IAAAA,0BAA0B;AAC7B,GAX4B,CAa7B;;;AACAc,EAAAA,MAAM,GAAG;AAAA,wBACiC,KAAKD,KADtC;AAAA,UACGE,KADH,eACGA,KADH;AAAA,UACUC,kBADV,eACUA,kBADV;AAGL,WACI;AACA;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,KAAD;AAAO,QAAA,KAAK,MAAZ;AAAa,QAAA,IAAI,EAAG,GAAED,KAAK,CAACE,IAAK,EAAjC;AACO,QAAA,SAAS,EAAEd,4BADlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,SAII,oBAAC,KAAD;AAAO,QAAA,IAAI,EAAG,GAAEY,KAAK,CAACE,IAAK,gBAA3B;AACO,QAAA,SAAS,EAAEb,uBADlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAJJ;AAFJ;AAUH;;AA3B4B,C,CA8BjC;;;AACA,MAAMc,eAAe,GAAGpB,wBAAwB,CAAC;AAC7CkB,EAAAA,kBAAkB,EAAEd;AADyB,CAAD,CAAhD;;AAIA,MAAMiB,kBAAkB,GAAGC,QAAQ,KAAK;AACpCpB,EAAAA,0BAA0B,EAAE,MAAMoB,QAAQ,CAACpB,0BAA0B,EAA3B;AADN,CAAL,CAAnC;;AAIA,eAAeD,OAAO,CAACmB,eAAD,EAAkBC,kBAAlB,CAAP,CAA6CX,QAA7C,CAAf","sourcesContent":["import React, {Component} from \"react\";\nimport { Route } from 'react-router-dom';\nimport { createStructuredSelector } from \"reselect\";\nimport { connect } from 'react-redux';\n\nimport { fetchCollectionsStartAsync } from \"../../redux/shop/shop.actions\";\nimport { selectIsCollectionFetching, selectIsCollectionsLoaded } from \"../../redux/shop/shop.selectors\";\n\nimport CollectionsOverviewContainer from \"../../components/collections-overview/collections-overview.container\";\nimport CollectionPageContainer from \"../collection/collection.container\";\nimport WithSpinner from \"../../components/with-spinner/with-spinner.component\";\n\nconst CollectionPageWithSpinner = WithSpinner(CollectionPage);\n\n// We have access to the match object here because we are using a route component in App.js to arrive here\n// Match.path allows us to route to a new page without having to worry about the url so far\nclass ShopPage extends Component {\n    state = {\n        loading: true\n    };\n\n    unsubscribeFromSnapshot = null;\n\n    // Remember to access the redux function that is being passed on mapDispatchToProps\n    componentDidMount() {\n        const { fetchCollectionsStartAsync } = this.props;\n        fetchCollectionsStartAsync();\n    }\n\n    // And here to access the isCollectionFetching prop being passed on mapStateToProps\n    render() {\n        const { match, isCollectionLoaded } = this.props;\n\n        return (\n            // Here we swapped the WithSpinner component for the container, as all variables are handled there\n            <div className='shop-page'>\n                <Route exact path={`${match.path}`}\n                       component={CollectionsOverviewContainer}/>}/>\n\n                <Route path={`${match.path}/:collectionId`}\n                       component={CollectionPageContainer}/>\n            </div>\n        );\n    }\n}\n\n// Here we use a selector to get that single state from redux-thunk\nconst mapStateToProps = createStructuredSelector({\n    isCollectionLoaded: selectIsCollectionsLoaded\n});\n\nconst mapDispatchToProps = dispatch => ({\n    fetchCollectionsStartAsync: () => dispatch(fetchCollectionsStartAsync())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ShopPage);"]},"metadata":{},"sourceType":"module"}