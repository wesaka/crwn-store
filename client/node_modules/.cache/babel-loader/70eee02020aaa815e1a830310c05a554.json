{"ast":null,"code":"var _jsxFileName = \"/home/wesaka/WebstormProjects/crwn-store/src/components/sign-in/sign-in.component.jsx\";\nimport React from \"react\";\nimport { connect } from 'react-redux';\nimport FormInput from \"../form-input/form-input.component\";\nimport CustomButton from \"../custom-button/custom-button.component\";\nimport { googleSignInStart, emailSignInStart } from \"../../redux/user/user.actions\";\nimport { ButtonsContainer, SigninContainer, TitleContainer } from \"./sign-in.styles\";\n\nclass SignIn extends React.Component {\n  constructor() {\n    super();\n\n    this.handleSubmit = async event => {\n      event.preventDefault();\n      const emailSignInStart = this.props.emailSignInStart;\n      const _this$state = this.state,\n            email = _this$state.email,\n            password = _this$state.password;\n      emailSignInStart(email, password);\n      this.setState({\n        email: '',\n        password: ''\n      });\n    };\n\n    this.handleChange = event => {\n      const _event$target = event.target,\n            value = _event$target.value,\n            name = _event$target.name;\n      this.setState({\n        [name]: value\n      });\n    };\n\n    this.state = {\n      email: '',\n      password: ''\n    };\n  }\n\n  render() {\n    const googleSignInStart = this.props.googleSignInStart;\n    return React.createElement(SigninContainer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, React.createElement(TitleContainer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, \"I already have an account\"), React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, \"Sign in with your password\"), React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, React.createElement(FormInput, {\n      type: \"text\",\n      name: \"email\",\n      label: \"Email\",\n      value: this.state.email,\n      handleChange: this.handleChange,\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }), React.createElement(FormInput, {\n      type: \"password\",\n      name: \"password\",\n      label: \"Password\",\n      value: this.state.password,\n      handleChange: this.handleChange,\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }), React.createElement(ButtonsContainer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, React.createElement(CustomButton, {\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, \" Sign In \"), React.createElement(CustomButton, {\n      type: \"button\",\n      onClick: googleSignInStart,\n      isGoogleSignIn: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, \"Sign in with Google\"))));\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => ({\n  googleSignInStart: () => dispatch(googleSignInStart()),\n  emailSignInStart: (email, password) => dispatch(emailSignInStart({\n    email,\n    password\n  }))\n});\n\nexport default connect(null, mapDispatchToProps)(SignIn);","map":{"version":3,"sources":["/home/wesaka/WebstormProjects/crwn-store/src/components/sign-in/sign-in.component.jsx"],"names":["React","connect","FormInput","CustomButton","googleSignInStart","emailSignInStart","ButtonsContainer","SigninContainer","TitleContainer","SignIn","Component","constructor","handleSubmit","event","preventDefault","props","state","email","password","setState","handleChange","target","value","name","render","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { connect } from 'react-redux';\n\nimport FormInput from \"../form-input/form-input.component\";\nimport CustomButton from \"../custom-button/custom-button.component\";\nimport { googleSignInStart, emailSignInStart } from \"../../redux/user/user.actions\";\n\nimport {ButtonsContainer, SigninContainer, TitleContainer} from \"./sign-in.styles\";\n\nclass SignIn extends React.Component {\n    constructor() {\n        super();\n\n        this.state = {\n            email: '',\n            password: ''\n        }\n    }\n\n    handleSubmit = async event => {\n        event.preventDefault();\n\n        const { emailSignInStart } = this.props;\n        const { email, password } = this.state;\n\n        emailSignInStart(email, password);\n\n        this.setState({email: '', password: ''});\n    };\n\n    handleChange = (event) => {\n        const {value, name} = event.target;\n\n        this.setState({[name]: value});\n    };\n\n    render() {\n        const { googleSignInStart } = this.props;\n\n        return (\n            <SigninContainer>\n                <TitleContainer>I already have an account</TitleContainer>\n                <span>Sign in with your password</span>\n\n                <form onSubmit={this.handleSubmit}>\n                    <FormInput\n                        type=\"text\"\n                        name='email'\n                        label='Email'\n                        value={this.state.email}\n                        handleChange={this.handleChange}\n                        required/>\n                    <FormInput\n                        type=\"password\"\n                        name='password'\n                        label='Password'\n                        value={this.state.password}\n                        handleChange={this.handleChange}\n                        required/>\n\n                    <ButtonsContainer>\n                        <CustomButton type=\"submit\"> Sign In </CustomButton>\n                        <CustomButton type=\"button\"\n                                      onClick={googleSignInStart}\n                                      isGoogleSignIn>\n                            Sign in with Google\n                        </CustomButton>\n                    </ButtonsContainer>\n                </form>\n            </SigninContainer>\n        )\n    }\n}\n\nconst mapDispatchToProps = dispatch => ({\n    googleSignInStart: () => dispatch(googleSignInStart()),\n    emailSignInStart: (email, password) => dispatch(emailSignInStart({email, password}))\n});\n\nexport default connect(null, mapDispatchToProps)(SignIn);"]},"metadata":{},"sourceType":"module"}