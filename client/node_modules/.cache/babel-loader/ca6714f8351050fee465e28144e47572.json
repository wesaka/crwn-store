{"ast":null,"code":"import _objectSpread from \"/home/wesaka/WebstormProjects/crwn-store/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nconst config = {\n  apiKey: \"AIzaSyCjnCD8NKTHwEIcAbz_x3l2kGQVT7OAUps\",\n  authDomain: \"crwn-db-9eb13.firebaseapp.com\",\n  databaseURL: \"https://crwn-db-9eb13.firebaseio.com\",\n  projectId: \"crwn-db-9eb13\",\n  storageBucket: \"crwn-db-9eb13.appspot.com\",\n  messagingSenderId: \"418191800346\",\n  appId: \"1:418191800346:web:6ff5d28c3d246b9704f9a3\"\n};\nexport const createUserProfileDocument = async (userAuth, displayName, additionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapshot = await userRef.get();\n\n  if (!snapshot.exists) {\n    const email = userAuth.email;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set(_objectSpread({\n        displayName,\n        email,\n        createdAt\n      }, additionalData));\n    } catch (e) {\n      console.log('Error creating user - ', e.message);\n    }\n  }\n\n  return userRef;\n};\nfirebase.initializeApp(config);\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n  const collectionRef = firestore.collection(collectionKey);\n  console.log(collectionRef);\n  const batch = firestore.batch();\n  objectsToAdd.forEach(obj => {\n    // By leaving the collectionRef.doc() empty we define that firestore sets us a new unique id\n    const newDocRef = collectionRef.doc(); // And uses that unique id in each object from our \"objectsToAdd\"\n\n    batch.set(newDocRef, obj);\n  });\n  return await batch.commit();\n};\nexport const convertCollectionsSnapshotToMap = collections => {\n  const transformedColletion = collections.docs.map(doc => {\n    const _doc$data = doc.data(),\n          title = _doc$data.title,\n          items = _doc$data.items;\n\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      items\n    };\n  }); // We are already getting the data back from firebase in the correct shape and values\n  // Now we need to convert it to the object map that we are going to use in the reducer\n  // Here we pass the accumulator (empty in a first moment - the {}) and the item at the current iteration\n\n  return transformedColletion.reduce((accumulator, collection) => {\n    accumulator[collection.title.toLowerCase()] = collection;\n    return accumulator;\n  }, {});\n}; // This works as follows:\n// We make a call for the firebase to get the current user using the Promise\n// On resolve, or it returns the currentUser or returns null if no user is authenticated\n// If it gives some error, we pass it to reject\n\nexport const getCurrentUser = () => {\n  return new Promise((resolve, reject) => {\n    const unsubscribe = auth.onAuthStateChanged(userAuth => {\n      unsubscribe();\n      resolve(userAuth);\n    }, reject);\n  });\n};\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\ngoogleProvider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\nexport default firebase;","map":{"version":3,"sources":["/home/wesaka/WebstormProjects/crwn-store/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","createUserProfileDocument","userAuth","displayName","additionalData","userRef","firestore","doc","uid","snapshot","get","exists","email","createdAt","Date","set","e","console","log","message","initializeApp","addCollectionAndDocuments","collectionKey","objectsToAdd","collectionRef","collection","batch","forEach","obj","newDocRef","commit","convertCollectionsSnapshotToMap","collections","transformedColletion","docs","map","data","title","items","routeName","encodeURI","toLowerCase","id","reduce","accumulator","getCurrentUser","Promise","resolve","reject","unsubscribe","auth","onAuthStateChanged","googleProvider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"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","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\n\nconst config = {\n    apiKey: \"AIzaSyCjnCD8NKTHwEIcAbz_x3l2kGQVT7OAUps\",\n    authDomain: \"crwn-db-9eb13.firebaseapp.com\",\n    databaseURL: \"https://crwn-db-9eb13.firebaseio.com\",\n    projectId: \"crwn-db-9eb13\",\n    storageBucket: \"crwn-db-9eb13.appspot.com\",\n    messagingSenderId: \"418191800346\",\n    appId: \"1:418191800346:web:6ff5d28c3d246b9704f9a3\"\n};\n\nexport const createUserProfileDocument = async (userAuth, displayName, additionalData) => {\n    if (!userAuth)\n        return;\n\n    const userRef = firestore.doc(`users/${userAuth.uid}`);\n    const snapshot = await userRef.get();\n\n    if (!snapshot.exists) {\n        const {email} = userAuth;\n        const createdAt = new Date();\n\n        try {\n            await userRef.set({\n                displayName,\n                email,\n                createdAt,\n                ...additionalData\n            });\n        } catch (e) {\n            console.log('Error creating user - ', e.message);\n        }\n    }\n\n    return userRef;\n};\n\nfirebase.initializeApp(config);\n\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n    const collectionRef = firestore.collection(collectionKey);\n    console.log(collectionRef);\n\n    const batch = firestore.batch();\n    objectsToAdd.forEach(obj => {\n        // By leaving the collectionRef.doc() empty we define that firestore sets us a new unique id\n        const newDocRef = collectionRef.doc();\n\n        // And uses that unique id in each object from our \"objectsToAdd\"\n        batch.set(newDocRef, obj);\n    });\n\n    return await batch.commit();\n};\n\nexport const convertCollectionsSnapshotToMap = (collections) => {\n    const transformedColletion = collections.docs.map(doc => {\n        const { title, items } = doc.data();\n\n        return {\n            routeName: encodeURI(title.toLowerCase()),\n            id: doc.id,\n            title,\n            items\n        }\n    });\n\n    // We are already getting the data back from firebase in the correct shape and values\n    // Now we need to convert it to the object map that we are going to use in the reducer\n    // Here we pass the accumulator (empty in a first moment - the {}) and the item at the current iteration\n    return transformedColletion.reduce((accumulator, collection) => {\n        accumulator[collection.title.toLowerCase()] = collection;\n        return accumulator;\n    }, {})\n};\n\n// This works as follows:\n// We make a call for the firebase to get the current user using the Promise\n// On resolve, or it returns the currentUser or returns null if no user is authenticated\n// If it gives some error, we pass it to reject\nexport const getCurrentUser = () => {\n    return new Promise((resolve, reject) => {\n      const unsubscribe = auth.onAuthStateChanged(userAuth => {\n          unsubscribe();\n          resolve(userAuth);\n      }, reject)\n    })\n};\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\n\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\ngoogleProvider.setCustomParameters({prompt: 'select_account'});\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\n\nexport default firebase;"]},"metadata":{},"sourceType":"module"}