{"ast":null,"code":"import { takeEvery } from 'redux-saga/effects';\nimport ShopActionTypes from \"./shop.types\";\nimport { convertCollectionsSnapshotToMap, firestore } from \"../../firebase/firebase.utils\";\nimport { fetchCollectionsFailure, fetchCollectionsSuccess } from \"./shop.actions\"; // This generator function here is what is going to manage the chain of actions of fetching collections\n// This used to be managed and called by redux thunk, but now we're using sagas to do it\n\nexport function* fetchCollectionAsync() {\n  const collectionRef = firestore.collection('collections');\n  dispatch(fetchCollectionsStart());\n  collectionRef.get().then(snapshot => {\n    const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n    dispatch(fetchCollectionsSuccess(collectionsMap));\n  }).catch(error => dispatch(fetchCollectionsFailure(error.message)));\n}\nexport function* fetchCollectionsStart() {\n  // Basically, this thing here listens to the specific redux actions and fires new functions accordingly\n  yield takeEvery(ShopActionTypes.FETCH_COLLECTION_START, fetchCollectionAsync);\n}","map":{"version":3,"sources":["/home/wesaka/WebstormProjects/crwn-store/src/redux/shop/shop.sagas.js"],"names":["takeEvery","ShopActionTypes","convertCollectionsSnapshotToMap","firestore","fetchCollectionsFailure","fetchCollectionsSuccess","fetchCollectionAsync","collectionRef","collection","dispatch","fetchCollectionsStart","get","then","snapshot","collectionsMap","catch","error","message","FETCH_COLLECTION_START"],"mappings":"AAAA,SAASA,SAAT,QAA0B,oBAA1B;AAEA,OAAOC,eAAP,MAA4B,cAA5B;AACA,SAAQC,+BAAR,EAAyCC,SAAzC,QAAyD,+BAAzD;AACA,SAAQC,uBAAR,EAAiCC,uBAAjC,QAA+D,gBAA/D,C,CAEA;AACA;;AACA,OAAO,UAAUC,oBAAV,GAAiC;AACpC,QAAMC,aAAa,GAAGJ,SAAS,CAACK,UAAV,CAAqB,aAArB,CAAtB;AACAC,EAAAA,QAAQ,CAACC,qBAAqB,EAAtB,CAAR;AAEAH,EAAAA,aAAa,CAACI,GAAd,GAAoBC,IAApB,CAAyBC,QAAQ,IAAI;AACjC,UAAMC,cAAc,GAAGZ,+BAA+B,CAACW,QAAD,CAAtD;AACAJ,IAAAA,QAAQ,CAACJ,uBAAuB,CAACS,cAAD,CAAxB,CAAR;AACH,GAHD,EAGGC,KAHH,CAGSC,KAAK,IAAIP,QAAQ,CAACL,uBAAuB,CAACY,KAAK,CAACC,OAAP,CAAxB,CAH1B;AAIH;AAED,OAAO,UAAUP,qBAAV,GAAkC;AACrC;AACA,QAAMV,SAAS,CAACC,eAAe,CAACiB,sBAAjB,EAAyCZ,oBAAzC,CAAf;AACH","sourcesContent":["import { takeEvery } from 'redux-saga/effects';\n\nimport ShopActionTypes from \"./shop.types\";\nimport {convertCollectionsSnapshotToMap, firestore} from \"../../firebase/firebase.utils\";\nimport {fetchCollectionsFailure, fetchCollectionsSuccess} from \"./shop.actions\";\n\n// This generator function here is what is going to manage the chain of actions of fetching collections\n// This used to be managed and called by redux thunk, but now we're using sagas to do it\nexport function* fetchCollectionAsync() {\n    const collectionRef = firestore.collection('collections');\n    dispatch(fetchCollectionsStart());\n\n    collectionRef.get().then(snapshot => {\n        const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n        dispatch(fetchCollectionsSuccess(collectionsMap));\n    }).catch(error => dispatch(fetchCollectionsFailure(error.message)));\n}\n\nexport function* fetchCollectionsStart() {\n    // Basically, this thing here listens to the specific redux actions and fires new functions accordingly\n    yield takeEvery(ShopActionTypes.FETCH_COLLECTION_START, fetchCollectionAsync);\n}"]},"metadata":{},"sourceType":"module"}