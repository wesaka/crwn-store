{"ast":null,"code":"import { connect } from 'react-redux';\nimport { compose } from \"redux\";\nimport { createStructuredSelector } from \"reselect\";\nimport { selectIsCollectionsLoaded } from \"../../redux/shop/shop.selectors\";\nimport WithSpinner from \"../../components/with-spinner/with-spinner.component\";\nimport CollectionPage from \"./collection.component\"; // We do here what we were doing in the shop page component, but handling locally all the changes needed\n// Basically here we get the isLoading value from the redux state and pass to the loading wrapper to handle\n// The rendering of the spinner component or the page itself\n\nconst mapStateToProps = createStructuredSelector({\n  isLoading: state => !selectIsCollectionsLoaded(state)\n});\nconst CollectionPageContainer = compose(connect(mapStateToProps), WithSpinner)(CollectionPage);\nexport default CollectionPageContainer;","map":{"version":3,"sources":["/home/wesaka/WebstormProjects/crwn-store/src/pages/collection/collection.container.jsx"],"names":["connect","compose","createStructuredSelector","selectIsCollectionsLoaded","WithSpinner","CollectionPage","mapStateToProps","isLoading","state","CollectionPageContainer"],"mappings":"AAAA,SAASA,OAAT,QAAwB,aAAxB;AACA,SAASC,OAAT,QAAwB,OAAxB;AACA,SAASC,wBAAT,QAAyC,UAAzC;AAEA,SAASC,yBAAT,QAA0C,iCAA1C;AACA,OAAOC,WAAP,MAAwB,sDAAxB;AACA,OAAOC,cAAP,MAA2B,wBAA3B,C,CAEA;AACA;AACA;;AAEA,MAAMC,eAAe,GAAGJ,wBAAwB,CAAC;AAC7CK,EAAAA,SAAS,EAAGC,KAAD,IAAW,CAACL,yBAAyB,CAACK,KAAD;AADH,CAAD,CAAhD;AAIA,MAAMC,uBAAuB,GAAGR,OAAO,CAACD,OAAO,CAACM,eAAD,CAAR,EAA2BF,WAA3B,CAAP,CAA+CC,cAA/C,CAAhC;AAEA,eAAeI,uBAAf","sourcesContent":["import { connect } from 'react-redux';\nimport { compose } from \"redux\";\nimport { createStructuredSelector } from \"reselect\";\n\nimport { selectIsCollectionsLoaded } from \"../../redux/shop/shop.selectors\";\nimport WithSpinner from \"../../components/with-spinner/with-spinner.component\";\nimport CollectionPage from \"./collection.component\";\n\n// We do here what we were doing in the shop page component, but handling locally all the changes needed\n// Basically here we get the isLoading value from the redux state and pass to the loading wrapper to handle\n// The rendering of the spinner component or the page itself\n\nconst mapStateToProps = createStructuredSelector({\n    isLoading: (state) => !selectIsCollectionsLoaded(state)\n});\n\nconst CollectionPageContainer = compose(connect(mapStateToProps), WithSpinner)(CollectionPage);\n\nexport default CollectionPageContainer;"]},"metadata":{},"sourceType":"module"}