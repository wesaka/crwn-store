{"ast":null,"code":"var _jsxFileName = \"/home/wesaka/WebstormProjects/crwn-store/src/components/collection-item/collection-item.component.jsx\";\nimport React from \"react\";\nimport { connect } from 'react-redux';\nimport './collection-item.styles.scss';\nimport CustomButton from \"../custom-button/custom-button.component\";\nimport { addItem } from \"../../redux/cart/cart.actions\";\nimport { CollectionItemContainer, Image, CollectionItemButton, CollectionFooterContainer, NameContainer, PriceContainer } from \"./collection-item.styles\"; // When using Redux, don't forget to add the action to the props\n\nconst CollectionItem = ({\n  item,\n  addItem\n}) => {\n  const name = item.name,\n        price = item.price,\n        imageUrl = item.imageUrl;\n  return React.createElement(CollectionItemContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }, React.createElement(Image, {\n    imageUrl: imageUrl,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }), React.createElement(CollectionFooterContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }, React.createElement(NameContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }, name), React.createElement(PriceContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, price)), React.createElement(CollectionItemButton, {\n    inverted: true,\n    onClick: () => addItem(item),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, \"Add to Cart\"));\n}; // Map dispatch to props is used to turn\n// things into state\n// Map state to props is used to turn things into props, to read states\n\n\nconst mapDispatchToProps = dispatch => ({\n  addItem: item => dispatch(addItem(item))\n});\n\nexport default connect(null, mapDispatchToProps)(CollectionItem);","map":{"version":3,"sources":["/home/wesaka/WebstormProjects/crwn-store/src/components/collection-item/collection-item.component.jsx"],"names":["React","connect","CustomButton","addItem","CollectionItemContainer","Image","CollectionItemButton","CollectionFooterContainer","NameContainer","PriceContainer","CollectionItem","item","name","price","imageUrl","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,OAAO,+BAAP;AAEA,OAAOC,YAAP,MAAyB,0CAAzB;AACA,SAASC,OAAT,QAAwB,+BAAxB;AACA,SAASC,uBAAT,EAAkCC,KAAlC,EAAyCC,oBAAzC,EAA+DC,yBAA/D,EAA0FC,aAA1F,EAAyGC,cAAzG,QAA+H,0BAA/H,C,CAEA;;AACA,MAAMC,cAAc,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQR,EAAAA;AAAR,CAAD,KAAuB;AAAA,QAClCS,IADkC,GACRD,IADQ,CAClCC,IADkC;AAAA,QAC5BC,KAD4B,GACRF,IADQ,CAC5BE,KAD4B;AAAA,QACrBC,QADqB,GACRH,IADQ,CACrBG,QADqB;AAG1C,SACI,oBAAC,uBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,KAAD;AAAO,IAAA,QAAQ,EAAEA,QAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAGI,oBAAC,yBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAgBF,IAAhB,CADJ,EAEI,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAiBC,KAAjB,CAFJ,CAHJ,EASI,oBAAC,oBAAD;AAAsB,IAAA,QAAQ,MAA9B;AAA+B,IAAA,OAAO,EAAE,MAAMV,OAAO,CAACQ,IAAD,CAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBATJ,CADJ;AAaH,CAhBD,C,CAkBA;AACA;AACA;;;AACA,MAAMI,kBAAkB,GAAGC,QAAQ,KAAK;AACpCb,EAAAA,OAAO,EAAEQ,IAAI,IAAIK,QAAQ,CAACb,OAAO,CAACQ,IAAD,CAAR;AADW,CAAL,CAAnC;;AAKA,eAAeV,OAAO,CAAC,IAAD,EAAOc,kBAAP,CAAP,CAAkCL,cAAlC,CAAf","sourcesContent":["import React from \"react\";\nimport { connect } from 'react-redux'\n\nimport './collection-item.styles.scss'\n\nimport CustomButton from \"../custom-button/custom-button.component\";\nimport { addItem } from \"../../redux/cart/cart.actions\";\nimport { CollectionItemContainer, Image, CollectionItemButton, CollectionFooterContainer, NameContainer, PriceContainer } from \"./collection-item.styles\"\n\n// When using Redux, don't forget to add the action to the props\nconst CollectionItem = ({ item, addItem }) => {\n    const { name, price, imageUrl } = item;\n\n    return (\n        <CollectionItemContainer>\n            <Image imageUrl={imageUrl}/>\n\n            <CollectionFooterContainer>\n                <NameContainer>{name}</NameContainer>\n                <PriceContainer>{price}</PriceContainer>\n            </CollectionFooterContainer>\n\n            { /* That action that is passed through props, must be \"activated\", in this case here */ }\n            <CollectionItemButton inverted onClick={() => addItem(item)}>Add to Cart</CollectionItemButton>\n        </CollectionItemContainer>\n    )\n};\n\n// Map dispatch to props is used to turn\n// things into state\n// Map state to props is used to turn things into props, to read states\nconst mapDispatchToProps = dispatch => ({\n    addItem: item => dispatch(addItem(item))\n});\n\n\nexport default connect(null, mapDispatchToProps)(CollectionItem);"]},"metadata":{},"sourceType":"module"}