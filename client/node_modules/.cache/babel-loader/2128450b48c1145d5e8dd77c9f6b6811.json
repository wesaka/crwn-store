{"ast":null,"code":"import { takeLatest, call, put, all } from 'redux-saga/effects';\nimport ShopActionTypes from \"./shop.types\";\nimport { convertCollectionsSnapshotToMap, firestore } from \"../../firebase/firebase.utils\";\nimport { fetchCollectionsFailure, fetchCollectionsSuccess } from \"./shop.actions\"; // This generator function here is what is going to manage the chain of actions of fetching collections\n// This used to be managed and called by redux thunk, but now we're using sagas to do it\n\nexport function* fetchCollectionAsync() {\n  try {\n    const collectionRef = firestore.collection('collections'); // This is very similar to async await\n\n    const snapshot = yield collectionRef.get(); // We want to yield if the call takes longer than expected, using call to call the function\n    // It allows saga to keep the control\n\n    const collectionsMap = yield call(convertCollectionsSnapshotToMap, snapshot); // Unlike thunk that uses dispatch to generate actions, saga uses put to call an action generator\n\n    yield put(fetchCollectionsSuccess(collectionsMap));\n  } catch (e) {\n    yield put(fetchCollectionsFailure(e.message));\n  }\n}\nexport function* fetchCollectionsStart() {\n  // Basically, this thing here listens to the specific redux actions and fires new functions accordingly\n  yield takeLatest(ShopActionTypes.FETCH_COLLECTION_START, fetchCollectionAsync);\n}\nexport function* shopSagas() {\n  yield all([call(fetchCollectionsStart)]);\n}","map":{"version":3,"sources":["/home/wesaka/WebstormProjects/crwn-store/src/redux/shop/shop.sagas.js"],"names":["takeLatest","call","put","all","ShopActionTypes","convertCollectionsSnapshotToMap","firestore","fetchCollectionsFailure","fetchCollectionsSuccess","fetchCollectionAsync","collectionRef","collection","snapshot","get","collectionsMap","e","message","fetchCollectionsStart","FETCH_COLLECTION_START","shopSagas"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,IAArB,EAA2BC,GAA3B,EAAgCC,GAAhC,QAA2C,oBAA3C;AAEA,OAAOC,eAAP,MAA4B,cAA5B;AACA,SAAQC,+BAAR,EAAyCC,SAAzC,QAAyD,+BAAzD;AACA,SAAQC,uBAAR,EAAiCC,uBAAjC,QAA+D,gBAA/D,C,CAEA;AACA;;AACA,OAAO,UAAUC,oBAAV,GAAiC;AACpC,MAAI;AACA,UAAMC,aAAa,GAAGJ,SAAS,CAACK,UAAV,CAAqB,aAArB,CAAtB,CADA,CAGA;;AACA,UAAMC,QAAQ,GAAG,MAAMF,aAAa,CAACG,GAAd,EAAvB,CAJA,CAMA;AACA;;AACA,UAAMC,cAAc,GAAG,MAAMb,IAAI,CAACI,+BAAD,EAAkCO,QAAlC,CAAjC,CARA,CAUA;;AACA,UAAMV,GAAG,CAACM,uBAAuB,CAACM,cAAD,CAAxB,CAAT;AACH,GAZD,CAYE,OAAOC,CAAP,EAAU;AACR,UAAMb,GAAG,CAACK,uBAAuB,CAACQ,CAAC,CAACC,OAAH,CAAxB,CAAT;AACH;AACJ;AAED,OAAO,UAAUC,qBAAV,GAAkC;AACrC;AACA,QAAMjB,UAAU,CAACI,eAAe,CAACc,sBAAjB,EAAyCT,oBAAzC,CAAhB;AACH;AAED,OAAO,UAAUU,SAAV,GAAsB;AACzB,QAAMhB,GAAG,CAAC,CACNF,IAAI,CAACgB,qBAAD,CADE,CAAD,CAAT;AAGH","sourcesContent":["import { takeLatest, call, put, all } from 'redux-saga/effects';\n\nimport ShopActionTypes from \"./shop.types\";\nimport {convertCollectionsSnapshotToMap, firestore} from \"../../firebase/firebase.utils\";\nimport {fetchCollectionsFailure, fetchCollectionsSuccess} from \"./shop.actions\";\n\n// This generator function here is what is going to manage the chain of actions of fetching collections\n// This used to be managed and called by redux thunk, but now we're using sagas to do it\nexport function* fetchCollectionAsync() {\n    try {\n        const collectionRef = firestore.collection('collections');\n\n        // This is very similar to async await\n        const snapshot = yield collectionRef.get();\n\n        // We want to yield if the call takes longer than expected, using call to call the function\n        // It allows saga to keep the control\n        const collectionsMap = yield call(convertCollectionsSnapshotToMap, snapshot);\n\n        // Unlike thunk that uses dispatch to generate actions, saga uses put to call an action generator\n        yield put(fetchCollectionsSuccess(collectionsMap))\n    } catch (e) {\n        yield put(fetchCollectionsFailure(e.message))\n    }\n}\n\nexport function* fetchCollectionsStart() {\n    // Basically, this thing here listens to the specific redux actions and fires new functions accordingly\n    yield takeLatest(ShopActionTypes.FETCH_COLLECTION_START, fetchCollectionAsync);\n}\n\nexport function* shopSagas() {\n    yield all([\n        call(fetchCollectionsStart)\n    ])\n}"]},"metadata":{},"sourceType":"module"}