{"ast":null,"code":"var _jsxFileName = \"/home/wesaka/WebstormProjects/crwn-store/src/components/cart-dropdown/cart-dropdown.component.jsx\";\nimport React from \"react\";\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { createStructuredSelector } from \"reselect\";\nimport CartItem from \"../cart-item/cart-item.component\";\nimport { selectCartItems } from \"../../redux/cart/cart.selectors\";\nimport { toggleCartHidden } from \"../../redux/cart/cart.actions\";\nimport { CartDropdownContainer, CartItemsContainer, DropdownButton, EmptyMessage } from \"./cart-dropdown.styles\";\n\nconst CartDropdown = ({\n  cartItems,\n  history,\n  dispatch\n}) => React.createElement(CartDropdownContainer, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 15\n  },\n  __self: this\n}, React.createElement(CartItemsContainer, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 16\n  },\n  __self: this\n}, cartItems.length ? cartItems.map(cartItem => React.createElement(CartItem, {\n  key: cartItem.id,\n  item: cartItem,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 19\n  },\n  __self: this\n})) : React.createElement(EmptyMessage, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 21\n  },\n  __self: this\n}, \"Your cart is empty\")), React.createElement(DropdownButton, {\n  onClick: () => {\n    history.push('/checkout');\n    dispatch(toggleCartHidden());\n  },\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 23\n  },\n  __self: this\n}, \"CHECKOUT\")); // Map dispatch to props is used to turn things into state\n// Map state to props is used to turn things into props, to read states\n\n\nconst mapStateToProps = createStructuredSelector({\n  // This name right here is what is used in props\n  // We are also using reselect selectors here, so the whole component doesn't need to be re-rendered every time something unrelated to the cart changes in the application\n  cartItems: selectCartItems\n});\nexport default withRouter(connect(mapStateToProps)(CartDropdown));","map":{"version":3,"sources":["/home/wesaka/WebstormProjects/crwn-store/src/components/cart-dropdown/cart-dropdown.component.jsx"],"names":["React","connect","withRouter","createStructuredSelector","CartItem","selectCartItems","toggleCartHidden","CartDropdownContainer","CartItemsContainer","DropdownButton","EmptyMessage","CartDropdown","cartItems","history","dispatch","length","map","cartItem","id","push","mapStateToProps"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAAQC,wBAAR,QAAuC,UAAvC;AAEA,OAAOC,QAAP,MAAqB,kCAArB;AAEA,SAASC,eAAT,QAAgC,iCAAhC;AACA,SAASC,gBAAT,QAAiC,+BAAjC;AACA,SAAQC,qBAAR,EAA+BC,kBAA/B,EAAmDC,cAAnD,EAAmEC,YAAnE,QAAsF,wBAAtF;;AAGA,MAAMC,YAAY,GAAG,CAAC;AAAEC,EAAAA,SAAF;AAAaC,EAAAA,OAAb;AAAsBC,EAAAA;AAAtB,CAAD,KACjB,oBAAC,qBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACI,oBAAC,kBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAEQF,SAAS,CAACG,MAAV,GACIH,SAAS,CAACI,GAAV,CAAcC,QAAQ,IAAI,oBAAC,QAAD;AAAU,EAAA,GAAG,EAAEA,QAAQ,CAACC,EAAxB;AAA4B,EAAA,IAAI,EAAED,QAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAA1B,CADJ,GAGI,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBALZ,CADJ,EAQI,oBAAC,cAAD;AAAgB,EAAA,OAAO,EAAE,MAAM;AAC3BJ,IAAAA,OAAO,CAACM,IAAR,CAAa,WAAb;AACAL,IAAAA,QAAQ,CAACR,gBAAgB,EAAjB,CAAR;AACH,GAHD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cARJ,CADJ,C,CAiBA;AACA;;;AACA,MAAMc,eAAe,GAAGjB,wBAAwB,CAAC;AAC7C;AACA;AACAS,EAAAA,SAAS,EAAEP;AAHkC,CAAD,CAAhD;AAMA,eAAeH,UAAU,CAACD,OAAO,CAACmB,eAAD,CAAP,CAAyBT,YAAzB,CAAD,CAAzB","sourcesContent":["import React from \"react\";\nimport { connect } from 'react-redux';\n\nimport { withRouter } from 'react-router-dom';\nimport {createStructuredSelector} from \"reselect\";\n\nimport CartItem from \"../cart-item/cart-item.component\";\n\nimport { selectCartItems } from \"../../redux/cart/cart.selectors\";\nimport { toggleCartHidden } from \"../../redux/cart/cart.actions\";\nimport {CartDropdownContainer, CartItemsContainer, DropdownButton, EmptyMessage} from \"./cart-dropdown.styles\";\n\n\nconst CartDropdown = ({ cartItems, history, dispatch }) => (\n    <CartDropdownContainer>\n        <CartItemsContainer>\n            {\n                cartItems.length ?\n                    cartItems.map(cartItem => <CartItem key={cartItem.id} item={cartItem}/>)\n                    :\n                    <EmptyMessage>Your cart is empty</EmptyMessage>}\n        </CartItemsContainer>\n        <DropdownButton onClick={() => {\n            history.push('/checkout');\n            dispatch(toggleCartHidden());\n        }}>CHECKOUT</DropdownButton>\n    </CartDropdownContainer>\n);\n\n\n// Map dispatch to props is used to turn things into state\n// Map state to props is used to turn things into props, to read states\nconst mapStateToProps = createStructuredSelector({\n    // This name right here is what is used in props\n    // We are also using reselect selectors here, so the whole component doesn't need to be re-rendered every time something unrelated to the cart changes in the application\n    cartItems: selectCartItems\n});\n\nexport default withRouter(connect(mapStateToProps)(CartDropdown));"]},"metadata":{},"sourceType":"module"}