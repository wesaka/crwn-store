{"ast":null,"code":"import ShopActionTypes from \"./shop.types\";\nimport { convertCollectionsSnapshotToMap, firestore } from \"../../firebase/firebase.utils\";\nexport const fetchCollectionsStart = () => ({\n  type: ShopActionTypes.FETCH_COLLECTION_START\n}); // Because of redux-thunk, this function can use dispatch\n\nexport const fetchCollectionsStartAsync = () => {\n  return dispatch => {\n    // We pass what collection we want to retrieve from firestore, in this case, 'collections'\n    const collectionRef = firestore.collection('collections');\n    dispatch(fetchCollectionsStart());\n    collectionRef.get().then(snapshot => {\n      const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n      this.setState({\n        loading: false\n      });\n    });\n  };\n};","map":{"version":3,"sources":["/home/wesaka/WebstormProjects/crwn-store/src/redux/shop/shop.actions.js"],"names":["ShopActionTypes","convertCollectionsSnapshotToMap","firestore","fetchCollectionsStart","type","FETCH_COLLECTION_START","fetchCollectionsStartAsync","dispatch","collectionRef","collection","get","then","snapshot","collectionsMap","setState","loading"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,cAA5B;AACA,SAAQC,+BAAR,EAAyCC,SAAzC,QAAyD,+BAAzD;AAEA,OAAO,MAAMC,qBAAqB,GAAG,OAAO;AACxCC,EAAAA,IAAI,EAAEJ,eAAe,CAACK;AADkB,CAAP,CAA9B,C,CAIP;;AACA,OAAO,MAAMC,0BAA0B,GAAG,MAAM;AACxC,SAAOC,QAAQ,IAAI;AACnB;AACA,UAAMC,aAAa,GAAGN,SAAS,CAACO,UAAV,CAAqB,aAArB,CAAtB;AACAF,IAAAA,QAAQ,CAACJ,qBAAqB,EAAtB,CAAR;AAEAK,IAAAA,aAAa,CAACE,GAAd,GAAoBC,IAApB,CAAyBC,QAAQ,IAAI;AACjC,YAAMC,cAAc,GAAGZ,+BAA+B,CAACW,QAAD,CAAtD;AACA,WAAKE,QAAL,CAAc;AAAEC,QAAAA,OAAO,EAAE;AAAX,OAAd;AACH,KAHD;AAIH,GATG;AAUP,CAXM","sourcesContent":["import ShopActionTypes from \"./shop.types\";\nimport {convertCollectionsSnapshotToMap, firestore} from \"../../firebase/firebase.utils\";\n\nexport const fetchCollectionsStart = () => ({\n    type: ShopActionTypes.FETCH_COLLECTION_START\n});\n\n// Because of redux-thunk, this function can use dispatch\nexport const fetchCollectionsStartAsync = () => {\n        return dispatch => {\n        // We pass what collection we want to retrieve from firestore, in this case, 'collections'\n        const collectionRef = firestore.collection('collections');\n        dispatch(fetchCollectionsStart());\n\n        collectionRef.get().then(snapshot => {\n            const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n            this.setState({ loading: false });\n        });\n    }\n};\n\n"]},"metadata":{},"sourceType":"module"}