{"ast":null,"code":"import { takeLatest, put, all, call } from 'redux-saga/effects';\nimport UserActionTypes from \"./user.types\";\nimport { googleProvider, auth, createUserProfileDocument } from \"../../firebase/firebase.utils\"; // We have to make a function that is going to actually sign in the user with google to be called later\n\nexport function* signInWithGoogle() {\n  // Let's wrap the API call with a try/catch condition\n  try {\n    const userRef = yield auth.signInWithPopup(googleProvider);\n    console.log(userRef);\n  } catch (e) {}\n} // First we need to listen for google sign start than trigger the actual sign in from saga\n\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart)]);\n}","map":{"version":3,"sources":["/home/wesaka/WebstormProjects/crwn-store/src/redux/user/user.sagas.js"],"names":["takeLatest","put","all","call","UserActionTypes","googleProvider","auth","createUserProfileDocument","signInWithGoogle","userRef","signInWithPopup","console","log","e","onGoogleSignInStart","GOOGLE_SIGN_IN_START","userSagas"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,GAArB,EAA0BC,GAA1B,EAA+BC,IAA/B,QAA2C,oBAA3C;AAEA,OAAOC,eAAP,MAA4B,cAA5B;AAEA,SAASC,cAAT,EAAyBC,IAAzB,EAA+BC,yBAA/B,QAAgE,+BAAhE,C,CAEA;;AACA,OAAO,UAAUC,gBAAV,GAA6B;AAChC;AACA,MAAI;AACA,UAAMC,OAAO,GAAG,MAAMH,IAAI,CAACI,eAAL,CAAqBL,cAArB,CAAtB;AACAM,IAAAA,OAAO,CAACC,GAAR,CAAYH,OAAZ;AACH,GAHD,CAGE,OAAOI,CAAP,EAAU,CAEX;AACJ,C,CAED;;AACA,OAAO,UAAUC,mBAAV,GAAgC;AACnC,QAAMd,UAAU,CAACI,eAAe,CAACW,oBAAjB,EAAuCP,gBAAvC,CAAhB;AACH;AAED,OAAO,UAAUQ,SAAV,GAAsB;AACzB,QAAMd,GAAG,CAAC,CACNC,IAAI,CAACW,mBAAD,CADE,CAAD,CAAT;AAGH","sourcesContent":["import { takeLatest, put, all, call } from 'redux-saga/effects';\n\nimport UserActionTypes from \"./user.types\";\n\nimport { googleProvider, auth, createUserProfileDocument } from \"../../firebase/firebase.utils\";\n\n// We have to make a function that is going to actually sign in the user with google to be called later\nexport function* signInWithGoogle() {\n    // Let's wrap the API call with a try/catch condition\n    try {\n        const userRef = yield auth.signInWithPopup(googleProvider);\n        console.log(userRef);\n    } catch (e) {\n        \n    }\n}\n\n// First we need to listen for google sign start than trigger the actual sign in from saga\nexport function* onGoogleSignInStart() {\n    yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle)\n}\n\nexport function* userSagas() {\n    yield all([\n        call(onGoogleSignInStart)\n    ]);\n}"]},"metadata":{},"sourceType":"module"}