{"ast":null,"code":"import ShopActionTypes from \"./shop.types\";\nexport const fetchCollectionsStart = () => ({\n  type: ShopActionTypes.FETCH_COLLECTION_START\n});\nexport const fetchCollectionsSuccess = collectionsMap => ({\n  type: ShopActionTypes.FETCH_COLLECTION_SUCCESS,\n  payload: collectionsMap\n});\nexport const fetchCollectionsFailure = errorMessage => ({\n  type: ShopActionTypes.FETCH_COLLECTION_FAILURE,\n  payload: errorMessage\n}); // THIS IS OLD CODE, BUT I WONT REMOVE IT FOR REASONS OF FUTURE REFERENCE\n// Because of redux-thunk (that was passed on as middleware), this function can use dispatch\n// And as redux-thunk is enabled, when we try to dispatch a function instead of an object\n// the function gets called with dispatch method as first argument\n// In this case, we managed to get all the asynchronous fetching data job to redux, not longer tied to the component\n// export const fetchCollectionsStartAsync = () => {\n//         return dispatch => {\n//         // We pass what collection we want to retrieve from firestore, in this case, 'collections'\n//         const collectionRef = firestore.collection('collections');\n//         dispatch(fetchCollectionsStart());\n//\n//         collectionRef.get().then(snapshot => {\n//             const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n//             dispatch(fetchCollectionsSuccess(collectionsMap));\n//         }).catch(error => dispatch(fetchCollectionsFailure(error.message)));\n//     }\n// };","map":{"version":3,"sources":["/home/wesaka/WebstormProjects/crwn-store/client/src/redux/shop/shop.actions.js"],"names":["ShopActionTypes","fetchCollectionsStart","type","FETCH_COLLECTION_START","fetchCollectionsSuccess","collectionsMap","FETCH_COLLECTION_SUCCESS","payload","fetchCollectionsFailure","errorMessage","FETCH_COLLECTION_FAILURE"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,cAA5B;AAEA,OAAO,MAAMC,qBAAqB,GAAG,OAAO;AACxCC,EAAAA,IAAI,EAAEF,eAAe,CAACG;AADkB,CAAP,CAA9B;AAIP,OAAO,MAAMC,uBAAuB,GAAGC,cAAc,KAAK;AACtDH,EAAAA,IAAI,EAAEF,eAAe,CAACM,wBADgC;AAEtDC,EAAAA,OAAO,EAAEF;AAF6C,CAAL,CAA9C;AAKP,OAAO,MAAMG,uBAAuB,GAAIC,YAAD,KAAmB;AACtDP,EAAAA,IAAI,EAAEF,eAAe,CAACU,wBADgC;AAEtDH,EAAAA,OAAO,EAAEE;AAF6C,CAAnB,CAAhC,C,CAKP;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import ShopActionTypes from \"./shop.types\";\n\nexport const fetchCollectionsStart = () => ({\n    type: ShopActionTypes.FETCH_COLLECTION_START\n});\n\nexport const fetchCollectionsSuccess = collectionsMap => ({\n    type: ShopActionTypes.FETCH_COLLECTION_SUCCESS,\n    payload: collectionsMap\n});\n\nexport const fetchCollectionsFailure = (errorMessage) => ({\n    type: ShopActionTypes.FETCH_COLLECTION_FAILURE,\n    payload: errorMessage\n});\n\n// THIS IS OLD CODE, BUT I WONT REMOVE IT FOR REASONS OF FUTURE REFERENCE\n// Because of redux-thunk (that was passed on as middleware), this function can use dispatch\n// And as redux-thunk is enabled, when we try to dispatch a function instead of an object\n// the function gets called with dispatch method as first argument\n\n// In this case, we managed to get all the asynchronous fetching data job to redux, not longer tied to the component\n// export const fetchCollectionsStartAsync = () => {\n//         return dispatch => {\n//         // We pass what collection we want to retrieve from firestore, in this case, 'collections'\n//         const collectionRef = firestore.collection('collections');\n//         dispatch(fetchCollectionsStart());\n//\n//         collectionRef.get().then(snapshot => {\n//             const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n//             dispatch(fetchCollectionsSuccess(collectionsMap));\n//         }).catch(error => dispatch(fetchCollectionsFailure(error.message)));\n//     }\n// };\n\n"]},"metadata":{},"sourceType":"module"}